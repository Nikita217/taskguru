
// üì¶ –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: TaskGuru backend + Telegram –±–æ—Ç + AI –æ–±—Ä–∞–±–æ—Ç–∫–∞

const express = require('express');
const cron = require('node-cron');
const fetch = require('node-fetch');
const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const { google } = require('googleapis');

const app = express();
const PORT = process.env.PORT || 3000;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const GOOGLE_SHEET_ID = process.env.GOOGLE_SHEET_ID;

const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: (process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY || '').replace(/\n/g, '\n')
  },
  scopes: ['https://www.googleapis.com/auth/spreadsheets']
});
const sheets = google.sheets({ version: 'v4', auth });

app.use(express.json());
app.use(express.static('public'));

const userContexts = {};

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userInput = msg.text;

  if (!userContexts[chatId]) {
    userContexts[chatId] = [
      { role: 'system', content: '–¢—ã ‚Äî –∫–æ—É—á, –º–æ—Ç–∏–≤–∏—Ä—É–µ—à—å –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.' }
    ];
  }

  userContexts[chatId].push({ role: 'user', content: userInput });

  try {
    const chatResponse = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: userContexts[chatId]
    });

    const reply = chatResponse.choices[0].message.content;
    userContexts[chatId].push({ role: 'assistant', content: reply });
    bot.sendMessage(chatId, reply);
  } catch (err) {
    console.error('‚ùå GPT –æ—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ GPT. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
});

async function checkAndSendReminders() {
  try {
    console.log('üõé –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'Tasks!A2:F'
    });
    const rows = res.data.values || [];
    const now = new Date();
    const soon = new Date(now.getTime() + 15 * 60 * 1000);

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const [id, userId, description, due, status, notified] = row;
      if (!due || status === 'Done' || notified === 'Yes') continue;

      const taskTime = new Date(due);
      if (taskTime > now && taskTime <= soon) {
        let motivation = `üîî –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –∑–∞–¥–∞—á–∞: "${description}"`;
        try {
          const prompt = `–ù–∞–ø–æ–º–Ω–∏ –æ –∑–∞–¥–∞—á–µ: "${description}". –ü–æ–¥–¥–µ—Ä–∂–∏ –º–æ—Ä–∞–ª—å–Ω–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é. –î–æ 250 —Å–∏–º–≤–æ–ª–æ–≤.`;
          const chatResponse = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [
              { role: 'system', content: '–¢—ã ‚Äî –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–æ—É—á –∏ –ø–æ–º–æ—â–Ω–∏–∫. –î–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏.' },
              { role: 'user', content: prompt }
            ]
          });
          motivation = chatResponse.choices[0].message.content.trim();
        } catch (err) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:', err.message);
        }

        try {
          const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
          const body = { chat_id: userId, text: motivation };

          const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
          });

          const result = await response.text();
          console.log('üì¨ –û—Ç–≤–µ—Ç Telegram:', result);

          await sheets.spreadsheets.values.update({
            spreadsheetId: GOOGLE_SHEET_ID,
            range: `Tasks!F${i + 2}`,
            valueInputOption: 'RAW',
            resource: { values: [['Yes']] }
          });
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err.message);
        }
      }
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkAndSendReminders:', err.message);
  }
}

app.get('/api/check-reminders', async (req, res) => {
  await checkAndSendReminders();
  res.send('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
});

cron.schedule('*/5 * * * *', async () => {
  console.log('‚è∞ Cron: –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
  await checkAndSendReminders();
});

app.get('/', (req, res) => res.send('TaskGuru —Ä–∞–±–æ—Ç–∞–µ—Ç'));

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
